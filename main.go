package main

import (
	"blog-chi-gorm/config"
	"blog-chi-gorm/middlewares"
	"blog-chi-gorm/routes"
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"time"

	_ "blog-chi-gorm/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	httpSwagger "github.com/swaggo/http-swagger"
)

func init() {
	config.SetupConfiguration()
}

// @title Go Blog
// @version 1.0
// @description Service Blog
// @termsOfService http://swagger.io/terms/

// @contact.name Renaldy Hidayat
// @contact.url https://github.com/renaldyhidayatt
// @contact.email renaldyhidayatt@gmail.com

// @securityDefinitions.apikey BearerAuth
// @in Header
// @name Authorization

// @host localhost:5000
// @BasePath /api

func main() {
	r := chi.NewRouter()

	if runtime.NumCPU() > 2 {
		runtime.GOMAXPROCS(runtime.NumCPU() / 2)
	}

	db, err := config.DatabaseConnect()

	if err != nil {
		log.Fatal(err)
	}

	r.Use(middleware.Logger)

	r.Use(middlewares.MiddlewareCors)

	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Welcome"))
	})

	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL("http://localhost:5000/swagger/doc.json"),
	))

	routes.NewAuthRoutes("/api/auth", db, r)
	routes.NewUserRoutes("/api/user", db, r)
	routes.NewArticleRoutes("/api/article", db, r)
	routes.NewCategoryRoutes("/api/category", db, r)
	routes.NewRoleRoutes("/api/role", db, r)
	routes.NewPermissionRoutes("/permission", db, r)
	routes.NewPostRoutes("/api/posts", db, r)
	routes.NewMenuRoutes("/api/menu", db, r)
	routes.NewSubMenuRoutes("/api/submenu", db, r)
	routes.NewTagRoutes("/api/tag", db, r)

	serve := &http.Server{
		Addr:         fmt.Sprintf(":%s", config.Config.PORT),
		WriteTimeout: config.Config.WRITETIMEOUT * 10,
		ReadTimeout:  config.Config.READTIMEOUT * 10,
		IdleTimeout:  time.Second * 60,
		Handler:      r,
	}

	go func() {
		err := serve.ListenAndServe()

		if err != nil {
			log.Fatal(err)
		}
	}()

	log.Println("Connected to port:", config.Config.PORT)

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)

	<-c

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	serve.Shutdown(ctx)
	os.Exit(0)

}
